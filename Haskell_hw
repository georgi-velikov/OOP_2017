import Data.Char
import Data.List
--taks 1
sumNumbers ::[Char] -> Integer
sumNumbers "" = 0
sumNumbers str = if null x then charToInt y + sumNumbers ys else charToInt x + sumNumbers xs
 where 
  (x,xs) = break isDigit str
  (y,ys) = break isAlpha str

charToInt :: [Char] -> Integer
charToInt str = toInteger(charToIntHelper ((length str)-1) str)
 where charToIntHelper n str = if n>=0 && isDigit (head str) then digitToInt(head str)*(10^n) + charToIntHelper (n-1) (tail str) else 0

--task 2
pythagoreanTriples :: Integer ->[(Integer, Integer, Integer)]
pythagoreanTriples p  = ([(a, b, c) | a <- [1..p], b <- [1..a], c <- [1..p], (a^2)+(b^2) == (c^2) , a + b +c < p])

--task3
normalizeMessage :: [Char] -> [Char]
normalizeMessage str 
 | null str           = []
 | isDigit (head str) = error "A number"
 | isLower (head str) = toUpper (head str) : normalizeMessage (tail str)
 | isUpper (head str) = (head str) : normalizeMessage(tail str)
 | otherwise          = normalizeMessage (tail str)

dct = zip ['A' .. 'Z'] (['F' .. 'Z'] ++ ['A' .. 'E'])

encodeSymbol :: [(Char,Char)] -> Char -> Char
encodeSymbol dct c = head[b |(a, b) <- dct, c == a]

--encodeMessage :: [(Char,Char)] -> [Char] -> [Char]
--encodeMessage dct message = concat [encodeSymbol dct m | m <- normalizeMessage message]

reverseEncoding :: [(Char,Char)] -> [(Char,Char)]
reverseEncoding dct = [(b, a)| (a, b) <- dct] 

--decodeMessage :: [Char] -> [Char] 
--decodeMessage dct encoded = concat [encodeSymbol (reverseEncoding dct) e | e <- encoded]

main :: IO()
main = do
print (sumNumbers "ab2x4n555")
print (pythagoreanTriples 50)
print (normalizeMessage "The quick Brown fox jumps over the lazy dog")
print (encodeSymbol dct 'A')
print (reverseEncoding dct)
